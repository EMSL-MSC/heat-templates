HeatTemplateFormatVersion: '2012-12-12'
Description: Management Server
Outputs:
  Name:
    Description: public DNS name of Instance
    Value:
      Fn::Select:
      - ip_address
      - Fn::Select:
        - '0'
        - Fn::GetAtt: [PrimaryInterface, fixed_ips]
  Id:
    Description: Instance Id
    Value:
      Ref: Instance
Parameters:
  IpAddress: {Description: Floating Ip Address to assign, Type: String}
  VolumeId: {Description: Volume where data lives, Type: String}
  PrimaryNetworkId: {Description: PrimaryNetworkId, Type: String}
  KeyName: {Description: Name of an existing EC2 KeyPair
      to enable SSH access, Type: String}
  ExtraUserData: {Default: '', Description: Extra
      UserData script, Type: String}
  InstanceZone: {Default: 'nova', Description: AvailabilityZone for
      this instance, Type: String}
  Flavor:
    Default: m1.tiny
    Description: Flavor to boot
    Type: String
#FIXME centos doesn't work. needs rdo and epel repo's.
  Image:
    Default: centos-6.5
    Description: Image of choice
    Type: String
  StartupTimeout: {Default: '1700', Description: How
      long to wait on node coming up, Type: Number}
  Name: 
    Description: Name of services in the stack
    Default: Mgmt
    Type: String
Resources:
  PrimaryInterface:
    Properties:
      name:
        Fn::Join:
          - ''
          - - {Ref: Name}
            - '-PrimaryPort'
      network_id: {Ref: PrimaryNetworkId}
    Type: OS::Neutron::Port
  Instance:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              mdadm: []
    Properties:
      name:
        Fn::Join:
          - ''
          - - {Ref: Name}
      availability_zone: {Ref: InstanceZone}
      image: {Ref: Image}
      flavor: {Ref: Flavor}
      key_name: {Ref: KeyName}
      networks:
        - {port: {Ref: PrimaryInterface}}
      user_data:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "yum update -y aws-cfn-bootstrap\n"
            - "## Error reporting helper function\n"
            - "function error_exit\n"
            - "{\n"
            - "   /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '"
            - {Ref: WaitHandleInstance}
            - "'\n"
            - "   exit 1\n"
            - "}\n"
            - "function trap_error\n"
            - "{\n"
            - "	error_exit \"Line: ${BASH_LINENO[0]}, ExitCode: $1\"\n"
            - "}\n"
            - "set -eu\n"
            - "trap 'trap_error \"$?\"' ERR\n"
            - "## Initialize CloudFormation bits\n"
            - "/opt/aws/bin/cfn-init -s "
            - {Ref: "AWS::StackName"}
            - " -r Instance --region "
            - {Ref: "AWS::Region"}
            - " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n"
            - "yum install -y python-ceilometerclient python-cinderclient python-glanceclient python-heatclient python-keystoneclient python-neutronclient python-novaclient python-openstackclient python-savannaclient python-swiftclient python-troveclient ansible\n"
            - "## Waiting for EBS mounts to become available\n"
            - "while [ ! -e /dev/vdb ]; do echo waiting for /dev/vdb to attach; sleep 10; done\n"
            - "/etc/init.d/sshd stop || true \n"
            - "echo '/dev/mgmt-vg0/mgmt-data /srv ext4 defaults,auto,noatime 0 0'"
            - " | tee -a /etc/fstab\n"
            - "mount /srv\n"
            - "mv /etc/ssh /etc/ssh.orig\n"
            - "umount /home || true \n"
            - "mv /home /home.old\n"
            - "ln -s /srv/home /home\n"
            - "ln -s /srv/etc/ssh /etc/ssh\n"
            - "sed -i '/password[ \t]*required[ \t]*pam_deny.so.*/asession    required    pam_mkhomedir.so' /etc/pam.d/password-auth-ac\n"
            - "if [ ! -f /srv/root/.ssh/authorized_keys.orig ]; then\n"
            - "    mv /srv/root/.ssh/authorized_keys /srv/root/.ssh/authorized_keys.orig || true\n"
            - "    cp -af /root/.ssh/authorized_keys /srv/root/.ssh\n"
            - "fi\n"
            - "cp -af /root/.ssh/authorized_keys /srv/root/.ssh\n"
            - "rm -rf /root/.ssh\n"
            - "ln -s /srv/root/.ssh /root/.ssh\n"
            - "## Extra userdata\n"
            - {Ref: ExtraUserData}
            - "\n"
            - "## CloudFormation signal that setup is complete\n"
            - "/opt/aws/bin/cfn-signal -e 0 -r \"ConfigServer setup complete\" '"
            - {Ref: WaitHandleInstance}
            - "'\n"
    Type: OS::Nova::Server
  VolumeMount:
    Properties:
      Device: /dev/vdb
      InstanceId: {Ref: Instance}
      VolumeId: {Ref: VolumeId}
    Type: AWS::EC2::VolumeAttachment
  Floating-IP:
    Properties:
      NetworkInterfaceId:
        Ref: PrimaryNetworkId
      InstanceId:
        Ref: Instance
      EIP:
        Ref: IpAddress
    Type: AWS::EC2::EIPAssociation
  WaitConditionInstance:
    DependsOn: Instance
    Properties:
      Handle: {Ref: WaitHandleInstance}
      Timeout: {Ref: StartupTimeout}
    Type: AWS::CloudFormation::WaitCondition
  WaitHandleInstance:
    Properties: {}
    Type: AWS::CloudFormation::WaitConditionHandle

