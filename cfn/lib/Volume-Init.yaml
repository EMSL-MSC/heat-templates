HeatTemplateFormatVersion: '2012-12-12'
Description: Create State Volume
Outputs:
  FixedIps:
    Description: Neutron Port Fixed IPs
    Value:
      Fn::GetAtt: [PrimaryInterface, Outputs.FixedIps]
  VolumeId:
    Description: Volume ID
    Value:
      Ref: Volume
#FIXME Add feature to use existing cinder volume instead of creating a new one.
Parameters:
  Name: {Description: Name for the volume, Type: String}
  PrimaryNetworkId: {Description: PrimaryNetworkId, Type: String}
  KeyName: {Description: Name of an existing EC2 KeyPair
      to enable SSH access, Type: String}
  ExtraUserData: {Default: '', Description: Extra
      UserData script, Type: String}
  InstanceZone: {Default: 'nova', Description: AvailabilityZone for
      this instance, Type: String}
  Flavor:
    Default: m1.tiny
    Description: Flavor to boot
    Type: String
  Image:
    Default: centos-6.5
    Description: Image of choice
    Type: String
  StartupTimeout: {Default: '1700', Description: How
      long to wait on node coming up, Type: Number}
  VolumeSize: {Default: '1', Description: Volume
      size for each EBS volume, Type: Number}
  VolumeContainer:
    AllowedValues: [lvm, lvmenc, enc, raw, user]
    Default: lvm
    Description: What type of container to use
    Type: String
  VolumeFormat:
    AllowedValues: [ext2, ext3, ext4, xfs]
    Default: ext4
    Description: How to format the volume
    Type: String
  LuksPassword:
    Default: ""
    NoEcho: 'true'
    Description: luks password to use if you are using luks
    Type: String
  DefaultSecurityGroups:
    AllowedValues: ["True", "False"]
    Default: "True"
    Description: Use true to ignore passed Security Groups and just use the default for your network.
    Type: String
  SecurityGroups: 
    Default: "[\"default\"]"
    Description: Security Groups to add to the instance
    Type: String
  AssignFloatingIp:
    AllowedValues: ["True", "False"]
    Default: "False"
    Description: Use true to setup a floating ip
    Type: String
  FloatingIpAddress:
    Default: ""
    Description: The floating ip address you would like to attach
    Type: String
  BaseURL:
    Default: 'https://raw.githubusercontent.com/EMSL-MSC/heat-templates/master/cfn/lib'
    Description: Base URL where other templates live.
    Type: String
  Metadata:
    Default: "{}"
    Description: Extra metadata to attach to the instance.
    Type: Json
  Mnt:
    Default: "/srv"
    Description: Where to mount the volume
    Type: String
Resources:
  PrimaryInterface:
    Properties:
      Parameters:
        NetworkId: {Ref: PrimaryNetworkId}
        SecurityGroups: {Ref: SecurityGroups}
        DefaultSecurityGroups: {Ref: DefaultSecurityGroups}
        BaseURL: {Ref: BaseURL}
      TemplateURL:
          Fn::Join:
          - ''
          - - {Ref: BaseURL}
            - "/NeutronPort.yaml"
    Type: AWS::CloudFormation::Stack
  Floating-Ip:
    Properties:
      Parameters:
        AssignFloatingIp: {Ref: AssignFloatingIp}
        InstanceId: {Ref: Instance}
        NetworkId: {Ref: PrimaryNetworkId}
        IpAddress: {Ref: FloatingIpAddress}
        BaseURL: {Ref: BaseURL}
      TemplateURL:
          Fn::Join:
          - ''
          - - {Ref: BaseURL}
            - "/FloatingIp.yaml"
    Type: AWS::CloudFormation::Stack
  Instance:
    Properties:
      metadata: {Ref: Metadata}
      availability_zone: {Ref: InstanceZone}
      image: {Ref: Image}
      flavor: {Ref: Flavor}
      key_name: {Ref: KeyName}
      networks:
        - port:
            "Fn::GetAtt": [PrimaryInterface, Outputs.PortId]
      user_data:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "yum install -y curl\n"
            - "## Error reporting helper function\n"
            - "function error_exit\n"
            - "{\n"
            - "   curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\": \"FAILURE\", \"Reason\": \"'\"$1\"'\", \"Data\": \"Application has completed configuration.\", \"UniqueId\": \"0000\"}' '"
            - {Ref: WaitHandleInstance}
            - "'\n"
            - "   exit 1\n"
            - "}\n"
            - "function trap_error\n"
            - "{\n"
            - "	error_exit \"Line: ${BASH_LINENO[0]}, ExitCode: $1\"\n"
            - "}\n"
            - "set -eu\n"
            - "trap 'trap_error \"$?\"' ERR\n"
            - "yum install -y mdadm lvm2\n"
            - "## Waiting for EBS mounts to become available\n"
            - "while [ ! -e /dev/vdb ]; do echo waiting for /dev/vdb to attach; sleep 10; done\n"
            - "NAME="
            - {Ref: Name}
            - "\n"
            - "VOLUME_CONTAINER="
            - {Ref: VolumeContainer}
            - "\n"
            - "VOLUMEFORMAT="
            - {Ref: VolumeFormat}
            - "\n"
            - "MNT="
            - {Ref: Mnt}
            - "\n"
            - "if [ $VOLUME_CONTAINER != \"user\" ]; then"
            - "(echo mklabel msdos; echo mkpart primary ext2 0 -1;"
            - "echo print; echo quit) | parted -a optimal /dev/vdb\n"
            - "blockdev --setra 128 /dev/vdb\n"
            - "## Create physical and logical volumes\n"
            - "dd if=/dev/zero of=/dev/vdb1 bs=512 count=1\n"
            - "VG_NAME=$NAME-vg0\n"
            - "LV_NAME=$NAME-data\n"
            - "DEVICE=/dev/vdb1\n"
            - "SUBDEVICE=$DEVICE\n"
            - "if [ $VOLUME_CONTAINER = \"lvmenc\" -o $VOLUME_CONTAINER = \"enc\" ]; then\n" 
            - "  yum install -y cryptsetup-luks\n"
            - "  echo -n \""
            - {Ref: LuksPassword}
            - "\" > /tmp/key\n"
            - "  cryptsetup --key-file /tmp/key luksFormat $DEVICE\n"
            - "  cryptsetup --key-file /tmp/key luksOpen $DEVICE $NAME\n"
            - "  rm -f /tmp/key\n"
            - "  DEVICE=/dev/mapper/$NAME\n"
            - "  SUBDEVICE=$DEVICE\n"
            - "fi\n"
            - "if [ $VOLUME_CONTAINER = \"lvmenc\" -o $VOLUME_CONTAINER = \"lvm\" ]; then\n" 
            - "  pvcreate $DEVICE\n"
            - "  vgcreate $VG_NAME $DEVICE\n"
            - "  lvcreate -l 100%vg -n $LV_NAME $VG_NAME\n"
            - "  SUBDEVICE=/dev/$VG_NAME/$LV_NAME\n"
            - "fi\n"
            - "## Create filesystems and mount point info\n"
            - "if [ $VOLUMEFORMAT = \"xfs\" ]; then\n"
            - "  yum install -y xfsprogs\n"
            - "  mkfs.xfs -f $SUBDEVICE >> /tmp/mkfs.log 2>&1\n"
            - "else\n"
            - "  mke2fs -t $VOLUMEFORMAT -F $SUBDEVICE >> /tmp/mkfs.log 2>&1\n"
            - "fi\n"
            - "mkdir -p $MNT\n"
            - "mount $SUBDEVICE $MNT\n"
            - "fi #end of VOLUME_CONTAINER !user\n"
            - "## Extra userdata\n"
            - {Ref: ExtraUserData}
            - "\n"
            - "if [ $VOLUME_CONTAINER != \"user\" ]; then\n"
            - "umount $MNT\n"
            - "fi\n"
            - "if [ $VOLUME_CONTAINER = \"lvmenc\" -o $VOLUME_CONTAINER = \"lvm\" ]; then\n" 
            - "  vgchange -a n $VG_NAME\n"
            - "fi\n"
            - "if [ $VOLUME_CONTAINER = \"lvmenc\" -o $VOLUME_CONTAINER = \"enc\" ]; then\n"
            - "  cryptsetup luksClose $NAME\n"
            - "fi\n"
            - "## CloudFormation signal that setup is complete\n"
            - "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\": \"SUCCESS\", \"Reason\": \"'\"$1\"'\", \"Data\": \"Application has completed configuration.\", \"UniqueId\": \"0001\"}' '"
            - {Ref: WaitHandleInstance}
            - "'\n"
    Type: OS::Nova::Server
  Volume:
    Properties:
      name: {Ref: Name}
      availability_zone: {Ref: InstanceZone}
      size: {Ref: VolumeSize}
    Type: OS::Cinder::Volume
    DeletionPolicy: Retain
  VolumeMount:
    Properties:
      Device: /dev/vdb
      InstanceId: {Ref: Instance}
      VolumeId: {Ref: Volume}
    Type: AWS::EC2::VolumeAttachment
  WaitConditionInstance:
    DependsOn: Instance
    Properties:
      Handle: {Ref: WaitHandleInstance}
      Timeout: {Ref: StartupTimeout}
    Type: AWS::CloudFormation::WaitCondition
  WaitHandleInstance:
    Properties: {}
    Type: AWS::CloudFormation::WaitConditionHandle

